#ifndef MutantStack_HPP
#define MutantStack_HPP

class MutantStack
{
    public :
        MutantStack(void);
        MutantStack(const MutantStack &cop);
        MutantStack &operator=(const MutantStack &eg);
        virtual ~MutantStack(void);
    private :

};

#endif

#include "MutantStack.hpp"

MutantStack::MutantStack(void)
{
    return;
}
MutantStack::MutantStack(const MutantStack &cop)
{
    *this = cop;
}
MutantStack &MutantStack::operator=(const MutantStack &eg)
{
    if (this != &eg)
    {

    }
    return (*this);
}
MutantStack::~MutantStack(void)
{
    return;
}

std::string MutantStack::getTarget(void) const
{
    return (this->_target);
}

void MutantStack::settarget(std::string str)
{
    this->_target = str;
}

